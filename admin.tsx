"use client";
import { useEffect, useState } from "react";
import { useRouter } from "next/router";

interface PendingCreator {
Â  name: string;
Â  email: string;
Â  about: string;
Â  token: string;
Â  images: string[];
Â  approved?: boolean;
}

interface AcceptedInfo {
Â  email: string;
Â  signupLink: string;
Â  emailBody: string;
}

export default function Admin() {
Â  const router = useRouter();
Â  const [applications, setApplications] = useState<PendingCreator[]>([]);
Â  const [accepted, setAccepted] = useState<AcceptedInfo[]>([]);
Â  const [hasMounted, setHasMounted] = useState(false);

Â  useEffect(() => {
Â  Â  const isAdmin = localStorage.getItem("isAdmin");
Â  Â  if (isAdmin !== "true") {
Â  Â  Â  router.push("/SignIn");
Â  Â  Â  return;
Â  Â  }

Â  Â  const stored = localStorage.getItem("pendingCreators");
Â  Â  if (stored) {
Â  Â  Â  setApplications(JSON.parse(stored));
Â  Â  }

Â  Â  setHasMounted(true);
Â  }, [router]);

Â  const handleLogout = () => {
Â  Â  localStorage.removeItem("isAdmin");
Â  Â  router.push("/SignIn");
Â  };

Â  const handleAccept = (app: PendingCreator, index: number) => {
Â  Â  const token = Math.random().toString(36).substring(2, 10);
Â  Â  const updatedApp: PendingCreator = { ...app, token, approved: true };

Â  Â  let pendingCreators: PendingCreator[] = JSON.parse(
Â  Â  Â  localStorage.getItem("pendingCreators") || "[]"
Â  Â  );

Â  Â  // Remove existing application by email
Â  Â  pendingCreators = pendingCreators.filter((c) => c.email !== app.email);

Â  Â  // Add new approved application with token
Â  Â  pendingCreators.push(updatedApp);

Â  Â  // Update state
Â  Â  const updatedApps = [...applications];
Â  Â  updatedApps.splice(index, 1);
Â  Â  setApplications(updatedApps);

Â  Â  // Save back to localStorage
Â  Â  localStorage.setItem("pendingCreators", JSON.stringify(pendingCreators));

Â  Â  const signupLink = `${window.location.origin}/create-account?token=${token}`;
Â  Â  const emailBody = `Hi ${app.name},

Great news â€” your application to become a seller on TrueCraft has been approved!

To create your account, click the link below:

${signupLink}

After creating your password, you'll be able to sign in and start uploading your handmade items.

Welcome aboard!
â€“ TrueCraft Team`;

Â  Â  setAccepted((prev) => [
Â  Â  Â  ...prev,
Â  Â  Â  {
Â  Â  Â  Â  email: app.email,
Â  Â  Â  Â  signupLink,
Â  Â  Â  Â  emailBody,
Â  Â  Â  },
Â  Â  ]);
Â  };

Â  const handleReject = (index: number) => {
Â  Â  const updated = [...applications];
Â  Â  updated.splice(index, 1);
Â  Â  setApplications(updated);
Â  Â  localStorage.setItem("pendingCreators", JSON.stringify(updated));
Â  };

Â  if (!hasMounted) return null;

Â  return (
Â  Â  <main className="min-h-screen bg-[#fefcf9] text-[#2e2e2e] font-sans">
Â  Â  Â  <nav className="bg-black text-white px-6 py-4 flex justify-between items-center sticky top-0 shadow-md z-50">
Â  Â  Â  Â  <h1 className="text-xl font-bold">TrueCraft Admin</h1>
Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  onClick={handleLogout}
Â  Â  Â  Â  Â  className="bg-white text-black px-4 py-1 rounded hover:bg-gray-100 transition"
Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Logout
Â  Â  Â  Â  </button>
Â  Â  Â  </nav>

Â  Â  Â  <div className="p-8 max-w-6xl mx-auto">
Â  Â  Â  Â  <h2 className="text-3xl font-bold mb-6">ðŸ“© Seller Applications</h2>

Â  Â  Â  Â  {applications.length === 0 ? (
Â  Â  Â  Â  Â  <p>No applications yet.</p>
Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  <div className="grid gap-4">
Â  Â  Â  Â  Â  Â  {applications.map((app, i) => (
Â  Â  Â  Â  Â  Â  Â  <div key={i} className="bg-white border rounded shadow p-4 space-y-2">
Â  Â  Â  Â  Â  Â  Â  Â  <p><strong>Name:</strong> {app.name}</p>
Â  Â  Â  Â  Â  Â  Â  Â  <p><strong>Email:</strong> {app.email}</p>
Â  Â  Â  Â  Â  Â  Â  Â  <p><strong>About:</strong> {app.about}</p>

Â  Â  Â  Â  Â  Â  Â  Â  {app.images && app.images.length > 0 && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex flex-wrap gap-2">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {app.images.map((img, idx) => (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <img
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  key={idx}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  src={img}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  alt={`Creation ${idx + 1}`}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="w-24 h-24 object-cover rounded"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  )}

Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex gap-4 pt-2">
Â  Â  Â  Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={() => handleAccept(app, i)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="bg-green-600 text-white px-4 py-1 rounded hover:bg-green-700 transition"
Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Accept
Â  Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={() => handleReject(i)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="bg-red-600 text-white px-4 py-1 rounded hover:bg-red-700 transition"
Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Reject
Â  Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  )}

Â  Â  Â  Â  {accepted.length > 0 && (
Â  Â  Â  Â  Â  <div className="mt-12">
Â  Â  Â  Â  Â  Â  <h2 className="text-2xl font-bold mb-4">âœ… Accepted Creators</h2>
Â  Â  Â  Â  Â  Â  <div className="grid gap-6">
Â  Â  Â  Â  Â  Â  Â  {accepted.map((info, i) => (
Â  Â  Â  Â  Â  Â  Â  Â  <div key={i} className="bg-green-50 border-l-4 border-green-600 p-4 rounded">
Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-green-900 font-semibold">Signup link for {info.email}:</p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-sm break-all bg-white p-2 rounded border my-2">{info.signupLink}</p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-green-900 font-semibold">Email body:</p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <textarea
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  readOnly
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="w-full text-sm border rounded p-2 bg-white"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  rows={7}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  value={info.emailBody}
Â  Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  )}
Â  Â  Â  </div>
Â  Â  </main>
Â  );
}